<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Mike Hartington</title><link>https://mhartington.io/post/</link><description>Recent content in Posts on Mike Hartington</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 12 Jul 2025 10:39:50 -0400</lastBuildDate><atom:link href="https://mhartington.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Recreating TanStack Query in Angular</title><link>https://mhartington.io/post/recreating-tanstack-query-for-angular/</link><pubDate>Sat, 12 Jul 2025 10:39:50 -0400</pubDate><guid>https://mhartington.io/post/recreating-tanstack-query-for-angular/</guid><description>&lt;p>Recently I&amp;rsquo;ve been building a React e-commerce app in a few frameworks for some Nx work, and in doing so I got to play around more with &lt;a href="https://tanstack.com/query/latest">TanStack Query&lt;/a>. I&amp;rsquo;m very late to the party when it comes to using TanStack Query but it&amp;rsquo;s damn good. While building an Angular version of my demos, I started missing some of TanStack Query&amp;rsquo;s features and wanted to take a shot at recreating something for Angular that would have something similar in a simple service.&lt;/p></description></item><item><title>A Moduleless Future for Angular</title><link>https://mhartington.io/post/a-moduleless-future-for-angular/</link><pubDate>Wed, 10 Jan 2024 13:51:49 +0000</pubDate><guid>https://mhartington.io/post/a-moduleless-future-for-angular/</guid><description>&lt;p>Recently a &lt;a href="https://github.com/angular/angular/pull/53861">Pull Request&lt;/a> from Matthieu Riegler came to the Angular repo that wanted to mark the &lt;code>HTTPClientModule&lt;/code> and similar modules as deprecated. Overall it seems the idea has received positive traction, though in Matthieu&amp;rsquo;s tweet about the PR, there was a comment in there that did stand out to me.&lt;/p>
&lt;blockquote>
&lt;p>I think I need an example before I decide whether I need pitchforks or not.&lt;/p>&lt;/blockquote>
&lt;p>So let&amp;rsquo;s make a quick example to show this person what this PR does and how it can impact non-standalone apps.&lt;/p></description></item><item><title>On Critique In Tech</title><link>https://mhartington.io/post/on-critique-in-tech/</link><pubDate>Wed, 22 Mar 2023 10:39:50 -0400</pubDate><guid>https://mhartington.io/post/on-critique-in-tech/</guid><description>&lt;p>It seems that the wider tech community is very prone to having heated arguments regarding a particular piece of technology. Hybrid vs Native, Tailwind vs CSS, Web Components vs Framework Components. They normally start off with a valid piece of criticism, but inevitably become a pissing contest. If some sort of argument doesn&amp;rsquo;t happen on Twitter, it can feel like a quiet week!&lt;/p>
&lt;h2 id="tribalism-in-tech">Tribalism in Tech&lt;/h2>
&lt;p>People in tech often feel passionate about their tools. Whether these are tools they use or tools they make. When someone from outside the &amp;ldquo;tribe&amp;rdquo; comments on a tool that people are passionate about, it&amp;rsquo;s taken as an attack against the whole tribe. Look at any comment (valid or not) against web components. Even if the point being made is a legit concern, web component proponents will take this as an attack on web standards or projects involved with web components. The same can be said for arguments amongst frontend frameworks and tailwind fans.&lt;/p></description></item><item><title>Modern Frontends Live</title><link>https://mhartington.io/post/modern-frontends-live/</link><pubDate>Sat, 19 Nov 2022 18:25:08 +0000</pubDate><guid>https://mhartington.io/post/modern-frontends-live/</guid><description>&lt;p>To all the attendees who spent their money on Modern Frontends Live: I&amp;rsquo;m sorry that you had to experience one of the most unpleasant conferences I&amp;rsquo;ve been a part of.&lt;/p>
&lt;p>To the speakers (new and seasoned pros) who were told they&amp;rsquo;d have their accommodations covered only to have that rug pulled out from under them: you deserve better and I hope there is a way to get something back.&lt;/p>
&lt;p>To the sponsors who spent their companies&amp;rsquo; money to attend an event which promised over 3000 attendees and more virtually: We know better now, but I hope you do not face any push back from your leaders regarding future events.&lt;/p></description></item><item><title>HMR in Ionic Angular</title><link>https://mhartington.io/post/hmr-in-ionic-angular/</link><pubDate>Mon, 15 Jun 2020 10:28:58 -0400</pubDate><guid>https://mhartington.io/post/hmr-in-ionic-angular/</guid><description>&lt;p>Something I&amp;rsquo;ve heard from a few people in the Ionic community is that the miss the updates speed from Ionic App scripts when updating CSS. They often ask &amp;ldquo;how can I use app scripts with V5?&amp;rdquo; or &amp;ldquo;Why is Angular CLI so much slower?&amp;rdquo;. Well it&amp;rsquo;s a bit more involved that just those blanketed statements, but it is possible wit the Angular CLI flag &lt;code>--hmr&lt;/code>.&lt;/p>
&lt;h2 id="app-scripts-and-styles">App Scripts and Styles&lt;/h2>
&lt;p>For those who don&amp;rsquo;t know, App Scripts was a project we made at Ionic that was essentially the Angular CLI, but before the Angular CLI was built. It was a full featured build pipeline that processed your Angular Components (HTML, CSS, and TS) and created the necessary JavaScript and CSS needed for the browser. A key feature about it was that it treated CSS just as regular CSS. Meaning everything was hoisted globally, and was just loaded via a link tag. The cons for this were that we didn&amp;rsquo;t follow Angular best practices or enabled style scoping, but the pros where that we could support live updates to an app&amp;rsquo;s CSS. This was possible because we didn&amp;rsquo;t treat CSS as a JS module. We just loaded CSS as you would any CSS library and would inject any updates on the fly.&lt;/p></description></item><item><title>TypeScript ESLint Setup</title><link>https://mhartington.io/post/typescript-eslint-setup/</link><pubDate>Thu, 21 Feb 2019 21:10:20 -0500</pubDate><guid>https://mhartington.io/post/typescript-eslint-setup/</guid><description>&lt;p>I was digging into ESLint tonight to see if there was a Language Service plugin available for TypeScript. In doing so, I realized I had no clue how to setup ESLint, especially considering the changes with regard to &lt;code>@typescript-eslint&lt;/code>.&lt;/p>
&lt;p>Last time I used ESLint, I was still writing AngularJS and ES6 was still far away. So, somethings have changed.&lt;/p>
&lt;h2 id="installing">Installing&lt;/h2>
&lt;p>First, we&amp;rsquo;ll want to install the necessary packages, ESLint, the parser, and the plugin itself.&lt;/p></description></item><item><title>nvim-typescript</title><link>https://mhartington.io/post/nvim-typescript/</link><pubDate>Wed, 30 May 2018 20:35:22 -0400</pubDate><guid>https://mhartington.io/post/nvim-typescript/</guid><description>&lt;p>These days it seems like everyone is using VSCode as their main editor, and with good reasons. VScode offers a lot of cool features, and if you&amp;rsquo;re using TypeScript, you get great support out of the box. But, I&amp;rsquo;m a vim person, and more specifically, I use &lt;a href="https://neovim.io">Neovim&lt;/a>. Since, I write mostly TypeScript, I needed something that offered all the feature of VSCode, but for Noevim. So I created &lt;a href="https://github.com/mhartington/nvim-typescript">nvim-typescript&lt;/a>.&lt;/p>
&lt;h3 id="scratching-an-itch">Scratching an itch&lt;/h3>
&lt;p>Having used vim for quite some time, I was wanting to write a plugin to learn some more about the editor. But after looking into Vimscript, I really didn&amp;rsquo;t quite get it. Instead, I went down the path using Neovim&amp;rsquo;s remote plugin API.&lt;/p></description></item><item><title>Angular Schematics and Dynamic Content</title><link>https://mhartington.io/post/angular-schematics-and-dynamic-content/</link><pubDate>Tue, 08 May 2018 18:07:00 -0400</pubDate><guid>https://mhartington.io/post/angular-schematics-and-dynamic-content/</guid><description>&lt;p>Recently, I&amp;rsquo;ve been diving into the new tooling setup being worked on for upcoming &lt;code>ionic/angular@4.0&lt;/code>. Since we&amp;rsquo;ve moved all of our tooling over to the Angular CLI, we get to take advantage of new features, like Angular&amp;rsquo;s Schematics. Schematics is a pipeline for building out new files/features in an app. What&amp;rsquo;s even more impressive, is that schematics itself can be used in a non-angular project. In theory, you could have a Vue or P/React project, and it could also use schematics, though without some utility libs that exist for Angular.&lt;/p></description></item><item><title>Adding Languages to iOS</title><link>https://mhartington.io/post/adding-languages-to-ios/</link><pubDate>Fri, 19 Jan 2018 07:24:04 -0500</pubDate><guid>https://mhartington.io/post/adding-languages-to-ios/</guid><description>&lt;p>In hybrid apps, when we want to add support for different languages, we tend to rely on JavaScript libraries to make this possible. This is perfect when we need to deploy a PWA, but when it comes to the App Store, we then have a different challenge. How do we tell the App Store that we support different languages as well?&lt;/p>
&lt;h3 id="how-ios-checks-this">How iOS Checks this&lt;/h3>
&lt;p>For native iOS project, the process is actually quite similar to how we manage localization in web-based apps. We setup a string file that is for the languages we want to support and create a mapping of keywords and their translated version. Then the translated value can be accessed in the app via &lt;code>NSLocalizedString&lt;/code>. But for hybrid apps that do not use native code, what do we do?&lt;/p></description></item><item><title>Ionic Colors Map: How to use them correctly</title><link>https://mhartington.io/post/ionic-colors-map/</link><pubDate>Wed, 27 Sep 2017 16:15:09 -0400</pubDate><guid>https://mhartington.io/post/ionic-colors-map/</guid><description>&lt;p>If you jumped from Ionic 1 to Ionic 2 when it was first released, a new thing that was added was this concept of &lt;code>$colors&lt;/code>. Something that looks like this :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">colors&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">primary&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">488aff&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">secondary&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">32db64&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">danger&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">f53d3d&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">light&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">f4f4f4&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">dark&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">222&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This was a big change from how we did styles in Ionic 1, where all of our theme colors were defined upfront:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">light&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">fff&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">stable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">f8f8f8&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">positive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">387ef5&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">calm&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">11c1f3&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">balanced&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">33cd5f&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">energized&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">ffc900&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">assertive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">ef473a&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">royal&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">886aea&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span>&lt;span class="nt">dark&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="nn">444&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The major difference here is that at compile time, we can generate the css rule using the map, instead of having to manually write the rules for each variable.&lt;/p></description></item><item><title>iPhoneX and The Notch</title><link>https://mhartington.io/post/iphonex-and-the-notch/</link><pubDate>Thu, 21 Sep 2017 10:39:55 -0400</pubDate><guid>https://mhartington.io/post/iphonex-and-the-notch/</guid><description>&lt;p>Every year Apple releases a new iPhone and a new iOS version to match. For the history of the iPhone, any changes that come with these new devices tend to be very small. Design changes in iOS7? Not a huge deal, as they&amp;rsquo;re fairly easy to design for, especially in a hybrid app context. This year however, Apple has introduce it&amp;rsquo;s most drastic change in iPhone history.&lt;/p>
&lt;p>&lt;img src="https://cdn.vox-cdn.com/thumbor/sReaaOYo1Lcl3-Hf73vByPPRBsg=/0x0:800x533/1200x800/filters:focal(336x203:464x331)/cdn.vox-cdn.com/uploads/chorus_image/image/56641599/apple_iphone_2017_20170912_11670.0.jpeg" alt="">&lt;/p>
&lt;p>&lt;em>Introducing… the Notch&lt;/em>&lt;/p></description></item><item><title>Custom Decorators</title><link>https://mhartington.io/post/custom-decorators/</link><pubDate>Wed, 31 May 2017 09:55:05 -0400</pubDate><guid>https://mhartington.io/post/custom-decorators/</guid><description>&lt;p>I&amp;rsquo;ve been getting more into decorators lately, especially since I used them in Angular/Ionic, but also in Python. But I realized that I really didn&amp;rsquo;t know much about them or how they actually worked. So I spent some time last night and built a small decorator, &lt;code>@platformReady()&lt;/code>.&lt;/p>
&lt;h3 id="wth-is-a-decorators">WTH is a decorators&lt;/h3>
&lt;p>Decorators can get confusing real fast, so we&amp;rsquo;re going to try to stay pretty high level here. In its simplest form, a decorator allows developers to perform higher-level functions on an annotated class or method. Python has these already so Let&amp;rsquo;s look at that for an example.&lt;/p></description></item><item><title>Revisiting Typings: Post 1.0</title><link>https://mhartington.io/post/typings-v1/</link><pubDate>Thu, 02 Jun 2016 13:03:06 -0400</pubDate><guid>https://mhartington.io/post/typings-v1/</guid><description>&lt;h3 id="typings-hits-10">Typings hits 1.0!&lt;/h3>
&lt;p>Typings finally hit its 1.0 recently (well more like a month or so ago), and with this it brought some drastic change to the API. So my previous post is now out of date.
This is a perfect chance to go over these changes and how it may affect your project.&lt;/p>
&lt;h3 id="whats-new">What&amp;rsquo;s new?&lt;/h3>
&lt;p>So a simple overview what&amp;rsquo;s changed from 0.X to 1.X has been provided in the &lt;a href="https://github.com/typings/typings#updating-from-0x-to-10">README.md&lt;/a>&lt;/p></description></item><item><title>Ionic 2 and External Libraries</title><link>https://mhartington.io/post/ionic2-external-libraries/</link><pubDate>Wed, 17 Feb 2016 11:38:32 -0500</pubDate><guid>https://mhartington.io/post/ionic2-external-libraries/</guid><description>&lt;p>Now that Ionic 2 is out in beta, people are setting aside some time to give it a shot and investigate everything it has to offer. Ionic 2 and Angular 2 bring a lot of improvements, but it&amp;rsquo;s a fairly different style of developing that what people were used to before. Now, since everything needs to be imported and libraries aren’t global, it can be tricky to figure out how to integrate with other libraries.&lt;/p></description></item><item><title>Setting Focus to an Input in Ionic 2</title><link>https://mhartington.io/post/setting-input-focus/</link><pubDate>Wed, 03 Feb 2016 09:37:41 -0500</pubDate><guid>https://mhartington.io/post/setting-input-focus/</guid><description>&lt;p>A Question came up in the Ionic Worldwide Slack today about how to set focus to an input. Now normally you&amp;rsquo;d think you would be able to call &lt;code>.focus()&lt;/code> and call it day. But Ionic wraps native text inputs with custom Angular 2 components to better control the user experience.&lt;/p></description></item><item><title>Object Fit</title><link>https://mhartington.io/post/object-fit/</link><pubDate>Thu, 14 Jan 2016 20:54:55 -0800</pubDate><guid>https://mhartington.io/post/object-fit/</guid><description>&lt;p>Today I was watching a random video on ES6 tooling when I saw the author use a CSS property I&amp;rsquo;d never heard of. &lt;code>object-fit&lt;/code>, and it was pretty awesome.&lt;/p>
&lt;blockquote>
&lt;p>Method of specifying how an object (image or video) should fit inside its box. object-fit options include &amp;ldquo;contain&amp;rdquo; (fit according to aspect ratio), &amp;ldquo;fill&amp;rdquo; (stretches object to fill) and &amp;ldquo;cover&amp;rdquo; (overflows box but maintains ratio), where object-position allows the object to be repositioned like background-image does.&lt;/p></description></item><item><title>Ionic IO app name</title><link>https://mhartington.io/post/ionic-io-app-name/</link><pubDate>Fri, 08 Jan 2016 16:01:47 -0500</pubDate><guid>https://mhartington.io/post/ionic-io-app-name/</guid><description>&lt;p>A good question came up in the Ionic Slack today. A dev was looking to change the name of an app that was already uploaded to the Ionic platform portal.&lt;/p>
&lt;p>When you start an ionic project from the CLI, along with all the html/css/js that you need, it creats an &lt;code>ionic.project&lt;/code> file. In here, you get your apps name and app_id
set, which gets used by the CLI&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;tmp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;app_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;9cf2c890&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now when I login to the Platform portal and upload my app, I&amp;rsquo;ll see it appear on my dash.&lt;/p></description></item><item><title>A New Year</title><link>https://mhartington.io/post/a-new-year/</link><pubDate>Sun, 03 Jan 2016 12:09:03 -0500</pubDate><guid>https://mhartington.io/post/a-new-year/</guid><description>&lt;p>This isn&amp;rsquo;t as much as a year in review for 2015, but all the things I look forward to doing in 2016.&lt;/p>
&lt;h2 id="2015">2015&lt;/h2>
&lt;p>So 2015 was a big year for me. I gave so many talks and got to meet a whole bunch of other speakers. This was definitly a year where I felt like I grew the most as a speaker and developer. If you&amp;rsquo;re looking to become a better speaker or get into being a dev advocate, defintily checkout this talk by &lt;a href="https://twitter.com/r00k">Ben Orenstein&lt;/a>&lt;/p></description></item><item><title>My Dotfiles</title><link>https://mhartington.io/post/my-dotfiles/</link><pubDate>Mon, 28 Dec 2015 10:30:41 -0500</pubDate><guid>https://mhartington.io/post/my-dotfiles/</guid><description>&lt;p>My dotfiles are my pride and joy. There are hundreds of hours spent tweaking them to create the best setup for me. Recently I&amp;rsquo;ve started working on three different machines, my Mac, a Windows machine, as well as Ubuntu. This introduced an interesting issue; how can I create a similar environment across all these platforms, but only store them in one location?&lt;/p></description></item><item><title>Welcome</title><link>https://mhartington.io/post/welcome/</link><pubDate>Mon, 28 Dec 2015 09:37:11 -0500</pubDate><guid>https://mhartington.io/post/welcome/</guid><description>&lt;p>Consider this my first post&lt;/p></description></item></channel></rss>